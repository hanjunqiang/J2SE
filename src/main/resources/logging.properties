# java.util.logging功能的测试--使用jdk自带的日志组件进行日志记录

# 日志级别 OFF=>SEVERE=>WARNING=>INFO=>CONFIG=>FINE=>FINER=>FINEST=>ALL

# 引入的处理器列表  java.util.logging.FileHandler,java.util.logging.ConsoleHandler,java.util.logging.MemoryHandler,
handlers=java.util.logging.SocketHandler
# 日志打印控制台设置
# 需要打印日志的级别
java.util.logging.ConsoleHandler.level=ALL
# 日志编码
java.util.logging.ConsoleHandler.encoding=utf-8
# 自定义日志过滤器java.util.logging.SimpleFormatter
java.util.logging.ConsoleHandler.formatter=com.noteshare.log.jdk.MyFormatter

# 日志记录文件配置设置
# 需要记录的日志级别
java.util.logging.FileHandler.level=ALL
# 设置日志记录格式
java.util.logging.FileHandler.formatter=java.util.logging.SimpleFormatter
# 设置日志文件大小，当日志文件大于该值时日志文件将重置为0，重新记录日志信息,单位字节
java.util.logging.FileHandler.limit=1024
# 日志文件个数，最多保留这么多个日志，命名格式如jdklog.log.0，jdklog.log.1 数字越小代表越新，当文件个数超出时会把旧的文件删除掉，保留最新的这么多个文件
java.util.logging.FileHandler.count=10
# 日志记录编码
java.util.logging.FileHandler.encoding=utf-8
# 文件存储路径 可以配置绝对路径，也可以设置相对路径如jdklog.log，则文件直接放置在J2SE根目录下
java.util.logging.FileHandler.pattern=d:\\logs\\jdklog.log
# 设置文件是否叠加大小
java.util.logging.FileHandler.append=true

# 日志记录到缓存中
# 需要缓存的日志级别
java.util.logging.MemoryHandler.level=ALL
# 设置日志记录格式
java.util.logging.MemoryHandler.formatter=java.util.logging.SimpleFormatter
# 设置需要缓存的日志条数 默认是1000条private final static int DEFAULT_SIZE = 1000;此处代表只记录前5条日志，被过滤掉的也会计算数值，push等级的也会计算条数，但是push的超出后仍然被记录。
java.util.logging.MemoryHandler.size=5
# 被推出的日志等级，此参数的意思目前测试出来的为：这个push设置的等级不受上面的size限制，无论是否超出size都将被记录
java.util.logging.MemoryHandler.push=WARNING
# 日志过滤器,可以通过日志过滤器来添加除上面等级限制外的其他日志记录逻辑判断,比如日志内容含有某些内容时不记录日志等逻辑；注意：测试结果过滤掉的记录也会影响上方size的计数
java.util.logging.MemoryHandler.filter=com.noteshare.log.jdk.MyFilter
# 内存处理器的目标处理器，即通过什么方式展示出来
java.util.logging.MemoryHandler.target=java.util.logging.ConsoleHandler

# 日志记录到socket中
# 需要发送的日志级别
java.util.logging.SocketHandler.level=ALL
# 设置日志记录格式
java.util.logging.SocketHandler.formatter=java.util.logging.SimpleFormatter
# 日志过滤器
# java.util.logging.SocketHandler.filter=com.noteshare.log.jdk.MyFilter
# 日志记录编码
java.util.logging.SocketHandler.encoding=utf-8
# 日志socket服务器地址
java.util.logging.SocketHandler.host=127.0.0.1
# 日志socket服务器端口
java.util.logging.SocketHandler.port=8888


# StreamHandler暂时还未做测试
